1> Generics exist in ts not in js.
   The whole concept is generic is to be flexible as well as strongly typed.

2> Built-in Generics
    -> If a type is connected to another type is called Generics types.
    ->
        const names: Array<string | number> = ['Amaresh', 'Rakesh', 2];
        const myPromise: Promise<string> = new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve('I am resolved');
            }, 2000)
        });

        myPromise.then((result) => {
            console.log(result.split(' ').reverse().join('-'))
        })

        We can use better intelligence if we use right Generics method.

3> create a Generics function
    function merge<T, U>(obj1: T, obj2: U){
        return Object.assign(obj1, obj2);
    }

    const ans1 = merge({name: 'ramesh'}, {age: 23})
    console.log(ans1.age);

    // type T and U will be assigned dynamically
    const ans2 = merge({name: 'ramesh', hobbies: ['sports', 'painting']}, {sex: 'female'})
    console.log(ans2.hobbies);

    // we can define type by calling method also

    const ans3 = merge<{std: number}, {section: string}>({std: 10}, {section: 'A'});
    console.log(ans3);

4> Working with constraints
    ->  We can see that the second parameter is not an object but since U will be any types it will accept.
        But object.assign method only merge two objects and here it will pass silently without error.

        function merge<T, U>(obj1: T, obj2: U){
            return Object.assign(obj1, obj2);
        }

        const ans1 = merge({name: 'ramesh'}, 23)
        console.log(ans1);

    -> we can restrict this by below ways
        function merge<T extends object, U extends object>(obj1: T, obj2: U){
            return Object.assign(obj1, obj2);
        }

        const ans1 = merge({name: 'ramesh'}, {age: 23})
        console.log(ans1);

        Now both the parameters will be of any structure but must be of object type.
        We can use any constraints depends on our requirement like
        T extends String or Number  or custom type like 

            types Person = {
                name: string;
                age: number;
            }
            T extends Person

5> More generic function   
    -> the functions acceps only those type which has length like string and array.
       Because we have T generic type and it doesn't has Lenght so we use extends to have length property.

    interface Lenghty{
        length: number;
    }

    function countAndDesribe<T extends Lenghty>(element: T): [T, string]{
        if(element.length === 1){
            return [element, 'Got 1 element'];
        }else if(element.length > 1){
            return [element, `Got ${element.length} elements`];
        }
        return [element, 'Got no element'];
    }
    console.log(countAndDesribe('Hi World'));
    console.log(countAndDesribe(['cooking', 'Painting']));
    console.log(countAndDesribe([]));


6> The keyOf constraint
    -> 
        function getValueOfKey(obj: object, key: string){
            return obj[key]; // throws error because ts doesn't know whether key exists in that object or not
        }

        console.log(getValueOfKey({name: 'Ramesh'}, 'name'));

    -> Solution (keyof operator)
        function getValueOfKey<T extends object, U extends keyof T>(obj: T, key: U){
            return obj[key];
        }

        console.log(getValueOfKey({name: 'Ramesh'}, 'name'));

7> A generic class
    -> 
        class DataStorage<T extends number | string | boolean>{
            private listOfItems;

            constructor(listofItems: T[]){
                this.listOfItems = listofItems;
            }

            addItem(item: T){
                this.listOfItems.push(item);
            }

            removeItem(item: T){
                this.listOfItems.splice(this.listOfItems.indexOf(item),1);
            }

            getItems(): T[]{
                return [...this.listOfItems];
            }
        }

        let numberDataStorage = new DataStorage<number>([1,2]);
        numberDataStorage.addItem(3);
        numberDataStorage.addItem(4);
        numberDataStorage.removeItem(3);
        console.log(numberDataStorage.getItems());

        let stringDataStorage = new DataStorage<string>(['Amar']);
        stringDataStorage.addItem('Akbar');
        stringDataStorage.addItem('Anthony');   
        stringDataStorage.removeItem('Akbar');
        console.log(stringDataStorage.getItems());
