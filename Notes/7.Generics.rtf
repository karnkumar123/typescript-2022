1> Generics exist in ts not in js.

2> Built-in Generics
    -> If a type is connected to another type is called Generics types.
    ->
        const names: Array<string | number> = ['Amaresh', 'Rakesh', 2];
        const myPromise: Promise<string> = new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve('I am resolved');
            }, 2000)
        });

        myPromise.then((result) => {
            console.log(result.split(' ').reverse().join('-'))
        })

        We can use better intelligence if we use right Generics method.

3> create a Generics function
    function merge<T, U>(obj1: T, obj2: U){
        return Object.assign(obj1, obj2);
    }

    const ans1 = merge({name: 'ramesh'}, {age: 23})
    console.log(ans1.age);

    // type T and U will be assigned dynamically
    const ans2 = merge({name: 'ramesh', hobbies: ['sports', 'painting']}, {sex: 'female'})
    console.log(ans2.hobbies);

    // we can define type by calling method also

    const ans3 = merge<{std: number}, {section: string}>({std: 10}, {section: 'A'});
    console.log(ans3);

4> Working with constraints
    ->  We can see that the second parameter is not an object but since U will be any types it will accept.
        But object.assign method only merge two objects and here it will pass silently without error.

        function merge<T, U>(obj1: T, obj2: U){
            return Object.assign(obj1, obj2);
        }

        const ans1 = merge({name: 'ramesh'}, 23)
        console.log(ans1);

    -> we can restrict this by below ways
        function merge<T extends object, U extends object>(obj1: T, obj2: U){
            return Object.assign(obj1, obj2);
        }

        const ans1 = merge({name: 'ramesh'}, {age: 23})
        console.log(ans1);

        Now both the parameters will be of any structure but must be of object type.
        We can use any constraints depends on our requirement like
        T extends String or Number  or custom type like 

            types Person = {
                name: string;
                age: number;
            }
            T extends Person

5> 
